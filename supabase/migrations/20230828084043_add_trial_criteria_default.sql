create table "public"."trial_criteria_defaults" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "trial_id" uuid,
    "criteria_id" bigint,
    "min_default" integer,
    "max_default" integer
);


alter table "public"."trial_criteria_defaults" enable row level security;

CREATE UNIQUE INDEX trial_criteria_defaults_pkey ON public.trial_criteria_defaults USING btree (id);

alter table "public"."trial_criteria_defaults" add constraint "trial_criteria_defaults_pkey" PRIMARY KEY using index "trial_criteria_defaults_pkey";

alter table "public"."trial_criteria_defaults" add constraint "trial_criteria_defaults_criteria_id_fkey" FOREIGN KEY (criteria_id) REFERENCES criteria(id) ON DELETE CASCADE not valid;

alter table "public"."trial_criteria_defaults" validate constraint "trial_criteria_defaults_criteria_id_fkey";

alter table "public"."trial_criteria_defaults" add constraint "trial_criteria_defaults_trial_id_fkey" FOREIGN KEY (trial_id) REFERENCES trials(id) ON DELETE CASCADE not valid;

alter table "public"."trial_criteria_defaults" validate constraint "trial_criteria_defaults_trial_id_fkey";

create policy "Enable read access for all users"
on "public"."trial_criteria_defaults"
as permissive
for select
to public
using (true);


create policy "owner can delete"
on "public"."trial_criteria_defaults"
as permissive
for delete
to authenticated
using ((EXISTS ( SELECT 1
   FROM trials
  WHERE ((trials.id = trial_criteria_defaults.trial_id) AND (trials.owner_id = auth.uid())))));


create policy "owner can insert"
on "public"."trial_criteria_defaults"
as permissive
for insert
to authenticated
with check ((EXISTS ( SELECT 1
   FROM trials
  WHERE ((trials.id = trial_criteria_defaults.trial_id) AND (trials.owner_id = auth.uid())))));


create policy "owner can update"
on "public"."trial_criteria_defaults"
as permissive
for update
to authenticated
using ((EXISTS ( SELECT 1
   FROM trials
  WHERE ((trials.id = trial_criteria_defaults.trial_id) AND (trials.owner_id = auth.uid())))));



